c
dev_js
q
JSON.pretty_generate( params )
JSON.prety_generate( params )
JSON.generate( params )
JSON.generate( params, nil, indent: 2 )
JSON.generate( params, null, indent: 2 )
JSON.generate
params.to_json
params
q
c
q
@engines.get( path )
q
File.size( filepath ).class
File.size( filepath )
q
status.body
status.code
status.class
puts status.methods.sort
status.status
status.headers[:content_type]
result.headers[:content_type]
status
q
y
"/containers/#{ event[:container_type] == 'service' ? 'service' : 'engine' }/#{ event[:container_name] }/status"q
event
"/containers/#{ event[:container_type] == 'service' ? 'service' : 'engine' }/#{ event[:container_name] }/status"
c
event
q
e
q
e.is_a? Error::SystemUnavailable
e
q
c
path == '/system/control/base_os/restart'
path
c
path
q
path
q
File.delete
File.delete if File.mtime( filepath ) + session_timeout_seconds < now
File.mtime( filepath ) + session_timeout_seconds < now
q
File.mtime( filepath ) + session_timeout_seconds < now
File.mtime( filepath ) + session_timeout_seconds > now
now
File.mtime( filepath ) + session_timeout_seconds
session_timeout_seconds
File.mtime( filepath )
c
q
File.mtime( filepath )
c
session_timeout_seconds = 1
c
q
ENV
app.class
app
client.class
client
client.env_for
client.env
Api
client.class
client.settings
client
q
Rack.settings
app.class
app
app.settings
settings
setting
q
settings.session_timeout_seconds
settings
c
q
settings.session_timeout_seconds
set
settings
setting
q
set
setting
settings
c
q
session
q
c
Marshal.load(Base64.decode64(CGI.unescape(request.cookies['rack.session'].split("\n").join).split('--').first))
c
Marshal.load(Base64.decode64(CGI.unescape(request.cookies['rack.session'].split("\n").join).split('--').first))
Marshal.load(Base64.decode64(CGI.unescape(cookie.split("\n").join).split('--').first))
request.cookies
Marshal.load(request.cookies['rack.session'].coder.decode(Rack::Utils.unescape(bakesale.split('--').first))) 
Marshal.load(rack_cookie.coder.decode(Rack::Utils.unescape(bakesale.split('--').first))) 
request.cookies["rack.session.options"]
request.cookies["rack.session"]
q
out.puts ''
c
out.puts "data: #{ data }\n\n"
data
q
c
serializedEvent
c
e.response.request.method.upcase
e.response.request.method
c
q
api_vars
c
api_vars
payload
q
url_for( route )
c
url_for( route )
              )
                block_response: options[:block_response]
                },
                  access_token: @token
                  content_type: options[:content_type] || :json,
                headers: {
                verify_ssl: false,
                timeout: options[:timeout] || 120,
                payload: options[:payload] || nil,
                url: url_for( route ),
                method: options[:method] || :get,
RestClient::Request.execute(
url_for( route )
c
url_for( route )
              )
                block_response: options[:block_response]
                },
                  access_token: @token
                  content_type: options[:content_type] || :json,
                headers: {
                verify_ssl: false,
                timeout: options[:timeout] || 120,
                payload: options[:payload] || nil,
                url: url_for( route ),
                method: options[:method] || :get,
RestClient::Request.execute(
