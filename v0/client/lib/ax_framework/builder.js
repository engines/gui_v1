var AxCellBuilder = function () {

	this.tagBuilder = new AxBuilderTags( this );
  this.extensionsBuilder = new AxBuilderExtensions( this );

  this.tag = function( tagType, components, attributes ) {
		return cellForTag( tagType, components, attributes );
  };

	// The purpose of this function is to move the the 'multiple' attribute
	// to the top of the Cell object. This is needed so that dropdown menu
	// on <select multiple: true> renders correctly when generated by Cell.
	var mergeAttributes = function( primaryAttributes, secondaryAttributes ) {
		secondaryAttributes = secondaryAttributes || {};
		result = secondaryAttributes.multiple ? { multiple: "multipe" } : {};
		delete secondaryAttributes.multiple;
		return Object.assign( result, primaryAttributes, secondaryAttributes );
	};

	var cellForTag = function( tagType, components, attributes ) {
		if ( typeof components === "string" || typeof components === "number" ) {
			return cellForString( tagType || "span", components, attributes );
		} else if ( components instanceof Array ) {
			return cellForArray( tagType || "div", components, attributes );
		} else if ( !components ) {
			return cellForNull( tagType || "span", attributes );
		} else if ( typeof components === "object" ) {
			return cellForObject( tagType || "span" , components, attributes );
    } else if ( typeof components === "function" ) {
			if ( /^class\s/.test( Function.prototype.toString.call( components ) ) ) {
				var instance = new components( this.tagBuilder, this.extensionsBuilder );
				components = instance.render( this.tagBuilder, this.extensionsBuilder );
				// attributes = Object.assign(
				// 	{ _axRenderedClass: axRenderedClass },
				// 	attributes
				// );
				// debugger;
				return cellForTag( tagType, components, attributes );
			} else {
				return cellForTag( tagType, components( this.tagBuilder, this.extensionsBuilder ), attributes );
			};
		};
	}.bind(this);

	var cellForNull = function( tagType, attributes ) {
		return mergeAttributes(
			{ $type: tagType },
			attributes
		);
	};

	var cellForString = function( tagType, text, attributes ) {
		return mergeAttributes(
			{ $type: tagType, $text: text },
			attributes
		);
	};

	var cellForArray = function( tagType, components, attributes ) {
    components = components.filter( function(n) { return n != undefined })
		return mergeAttributes(
			{
				$type: tagType,
				$components: components.map( function (el) {
					return cellForTag( null, el );
				} ),
			},
			attributes
		);
	};

	var cellForObject = function( tagType, components, attributes ) {
		if ( tagType ) {
			return mergeAttributes(
				{ $type: tagType, $components: [ components ] },
				attributes
			);
		} else {
			return mergeAttributes( components, attributes );
		};
	};

};
